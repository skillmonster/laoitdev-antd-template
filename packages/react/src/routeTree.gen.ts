/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/_admin'
import { Route as AdminIndexImport } from './routes/_admin/index'
import { Route as AdminProfileIndexImport } from './routes/_admin/profile/index'
import { Route as AdminDashboardIndexImport } from './routes/_admin/dashboard/index'
import { Route as AdminManagementUsersIndexImport } from './routes/_admin/(Management)/users/index'
import { Route as AdminManagementUsersViewIdImport } from './routes/_admin/(Management)/users/view.$id'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProfileIndexRoute = AdminProfileIndexImport.update({
  path: '/profile/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminDashboardIndexRoute = AdminDashboardIndexImport.update({
  path: '/dashboard/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminManagementUsersIndexRoute = AdminManagementUsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminManagementUsersViewIdRoute = AdminManagementUsersViewIdImport.update(
  {
    path: '/users/view/$id',
    getParentRoute: () => AdminRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_admin/': {
      id: '/_admin/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/_admin/dashboard/': {
      id: '/_admin/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AdminDashboardIndexImport
      parentRoute: typeof AdminImport
    }
    '/_admin/profile/': {
      id: '/_admin/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AdminProfileIndexImport
      parentRoute: typeof AdminImport
    }
    '/_admin/(Management)/users/': {
      id: '/_admin/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AdminManagementUsersIndexImport
      parentRoute: typeof AdminImport
    }
    '/_admin/(Management)/users/view/$id': {
      id: '/_admin/users/view/$id'
      path: '/users/view/$id'
      fullPath: '/users/view/$id'
      preLoaderRoute: typeof AdminManagementUsersViewIdImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
  AdminProfileIndexRoute: typeof AdminProfileIndexRoute
  AdminManagementUsersIndexRoute: typeof AdminManagementUsersIndexRoute
  AdminManagementUsersViewIdRoute: typeof AdminManagementUsersViewIdRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
  AdminProfileIndexRoute: AdminProfileIndexRoute,
  AdminManagementUsersIndexRoute: AdminManagementUsersIndexRoute,
  AdminManagementUsersViewIdRoute: AdminManagementUsersViewIdRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface FileRoutesByFullPath {
  '': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof AdminIndexRoute
  '/dashboard': typeof AdminDashboardIndexRoute
  '/profile': typeof AdminProfileIndexRoute
  '/users': typeof AdminManagementUsersIndexRoute
  '/users/view/$id': typeof AdminManagementUsersViewIdRoute
}

interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof AdminIndexRoute
  '/dashboard': typeof AdminDashboardIndexRoute
  '/profile': typeof AdminProfileIndexRoute
  '/users': typeof AdminManagementUsersIndexRoute
  '/users/view/$id': typeof AdminManagementUsersViewIdRoute
}

interface FileRoutesById {
  '/_admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/_admin/': typeof AdminIndexRoute
  '/_admin/dashboard/': typeof AdminDashboardIndexRoute
  '/_admin/profile/': typeof AdminProfileIndexRoute
  '/_admin/users/': typeof AdminManagementUsersIndexRoute
  '/_admin/users/view/$id': typeof AdminManagementUsersViewIdRoute
}

interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/'
    | '/dashboard'
    | '/profile'
    | '/users'
    | '/users/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/dashboard' | '/profile' | '/users' | '/users/view/$id'
  id:
    | '/_admin'
    | '/login'
    | '/_admin/'
    | '/_admin/dashboard/'
    | '/_admin/profile/'
    | '/_admin/users/'
    | '/_admin/users/view/$id'
  fileRoutesById: FileRoutesById
}

interface RootRouteChildren {
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_admin",
        "/login"
      ]
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/",
        "/_admin/dashboard/",
        "/_admin/profile/",
        "/_admin/users/",
        "/_admin/users/view/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_admin/": {
      "filePath": "_admin/index.tsx",
      "parent": "/_admin"
    },
    "/_admin/dashboard/": {
      "filePath": "_admin/dashboard/index.tsx",
      "parent": "/_admin"
    },
    "/_admin/profile/": {
      "filePath": "_admin/profile/index.tsx",
      "parent": "/_admin"
    },
    "/_admin/users/": {
      "filePath": "_admin/(Management)/users/index.tsx",
      "parent": "/_admin"
    },
    "/_admin/users/view/$id": {
      "filePath": "_admin/(Management)/users/view.$id.tsx",
      "parent": "/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
